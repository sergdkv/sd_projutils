/*-------------------------------------------------------------------------
   orbmodel.h
-------------------------------------------------------------------------*/
#ifndef _ORBMODEL_H_
#define _ORBMODEL_H_

#include <orbconst.h>
#include <c_except.h>
#include <c_sattbl.h>

//#include <c_lib.hpp>

#include <c_types.hpp>
#include <c_b0.hpp>
#include <c_b0noaa.hpp>
#include <c_b0proj.hpp>


/*-------------------------------------------------------------------------
    TCorrectionParams
    Класс для представления набора параметров коррекции географической
    привязки.
-------------------------------------------------------------------------*/
class TCorrectionParams {
public:

    TCorrectionParams( const TBlk0 & blk0 );

    TCorrectionParams( ulong ver = 0,
        double t = 0, double tbus_t = 0,
        double roll_angle = 0, double pitch_angle = 0, double yaw_angle = 0 );

    friend int operator==( const TCorrectionParams &c1, const TCorrectionParams &c2 );
    friend int operator!=( const TCorrectionParams &c1, const TCorrectionParams &c2 );

// 0 - отсутствие коррекции
// 1 - коррекция вычислена с использованием орбитальной модели SGP8
// 2 - коррекция вычислена с использованием орбитальной модели SGP4
    ulong fVersion;

// коррекция времени начала сеанса
    double fTime;       // В секундах.
    double fTBUSTime;   // В секундах.
// коррекция ориентации платформы спутника, в радианах
    double roll;
    double pitch;
    double yaw;
};


//--------------------------------------------------------------------------
//  TIniSatParams
//  Прогнозные орбитальные параметры.
//--------------------------------------------------------------------------
class TIniSatParams {
public:
    TIniSatParams( const TBlk0 & );
    TIniSatParams( const TOldBlk0 & );
//--------------------------------------------------------------------------
//  Инициализация текстом телеграммы TLE, уже прочитанным в буфер. Буфер
//  должен содержать только текст телеграммы, без имени спутника перед ним.
//--------------------------------------------------------------------------
    TIniSatParams( const char * );
//--------------------------------------------------------------------------
//  Инициализация из файла телеграмм TLE, получаемого по E-Mail.
//  TIniSatParams( const char * fileName, const char *satName )
//  Параметры:
//  satName     Задает имя спутника. Например, "NOAA 12".
//              Максимальный размер - 32 символа, включая '\0'.
//  Исключения:
//  TAccessExc( 1, "Ошибка доступа к файлу TLE" )
//  TRequestExc( 1, "Файл TLE не содержит телеграммы для данного спутника" )
//-------------------------------------------------------------------------
    TIniSatParams( const char *, const char * ) throw ( TAccessExc, TRequestExc );

    unsigned fRevNum;
    unsigned fSetNum;
    int    fEpochYear;
    double fEpochYearTime;  // Полное время в году, выраженное в днях (0-based).
    double n0;       // Mean motion.
    double bstar;    // BSTAR drag term.
    double i0;       // Inclination.
    double raan;     // Right ascension of ascending node.
    double e0;       // Eccentricity.
    double w0;       // Argument of perigee.
    double m0;       // Mean anomaly.
};


/*-------------------------------------------------------------------------
    TNOAAImageParams
-------------------------------------------------------------------------*/
class TNOAAImageParams {
public:
    TNOAAImageParams( const TBlk0 & );

    TSatInfoTable::NoradSatId   satId;      // идентификатор спутника NORAD
    ulong   fYear;          // Полный год.
    double  fYearTime;      // Полное время в году, выраженное в днях (0-based).
    ulong   fScans;         // Число сканов в снимке.
    int     fAscendFlag;    // false - нисходящий, true - восходящий
};


/*-------------------------------------------------------------------------
    class TOrbitalModel
-------------------------------------------------------------------------*/
class TOrbitalModel {
public:
//--------------------------------------------------------------------------
//  Производится инициализация переменных, или не зависящих от времени, или
//  зависящих только от базового момента времени ( baseYear и baseYearTime ).
//  Параметры, вычисляемые для конкретного момента времени, остаются
//  неопределенными. Для их вычисления необходимо воспользоваться функцией
//  model.
//  Параметры:
//  baseYear        Год, включая век: 1997, а не 97.
//  baseYearTime    Время в году, выраженное в днях (0-based).
//  ВНИМАНИЕ !!! Параметры baseYear и baseYearTime должны задавать время,
//  как можно ближе лежащее к тем моментам времени, для которых в дальнейшем
//  будет вызываться функция model.
//--------------------------------------------------------------------------
    TOrbitalModel( const TIniSatParams&, int baseYear, double baseYearTime,
         const TCorrectionParams& cop = TCorrectionParams() );

// Расчитывает орбитальные параметры на момент времени, заданный относительно базового.
// Параметры:
// rel_time      Относительное время в днях ( может быть отрицательным ).
    void model( double rel_time );

    int     fBaseYear;
    double  fBaseYearTime;
    double  fRelTime; // Момент времени, на который сейчас просчитана орбитальная модель. Выражено относительно fBaseYear+fBaseYearTime в днях.

//-------------------------------------------------------------------------
// Параметры, вычисляемые для конкретного момента времени.
//-------------------------------------------------------------------------
    double r[3];    // Радиус-вектор в неподвижной с.к.
    double v[3];    // Скорость в неподвижной с.к.
    double m;       // Средняя аномалия.
    double E;       // Эксцентрическая аномалия.
    double f;       // Истинная аномалия.
    double ov;      // Угол на Овна.
    double om;      // Восходящий узел.
    double e;       // Eccentricity.
    double n;       // Среднее движение.
    double w;       // Аргумент перигея.
    double R;       // расстояние от центра Земли до ИСЗ
    double i;       // наклонение орбиты
    double a;       // большая полуось орбиты

//-------------------------------------------------------------------------
//  Параметры, инициализируемые конструктором.
//-------------------------------------------------------------------------
    // SGP4, SGP8
    TIniSatParams isp;
    double ov0;     // угол на Овна
    double n0;      // Original mean motion.
    double a0;      // Semimajor axis.

    // SGP8
    double dn;      // Производная по времени среднего движения.
    double de;      // Производная по времени эксцентриситета.
    double omf, oms;
    double wf, ws;
    double mf, ms;

    // SGP4
    double c1, c2, c3, c4, c5;
    double d2, d3, d4;
    double ksi, beta, etta, teta;
    double dmdt;
    double dwdt;
    double domdt;

private:

    enum OrbitalModel { SGP4, SGP8 };

/*
    Инициализируется конструктором в зависимости от значения поля fVersion параметра cop.
    По умолчанию (fVersion == 0) используется модель sgp8.
*/
    OrbitalModel fModel;

    void ini_sgp4();
    void ini_sgp8();

    void sgp4( double rel_time );
    void sgp8( double rel_time );

    static double ovenAngle( int year, double year_time );
};



//-------------------------------------------------------------------------
//  TInverseReferencer
//-------------------------------------------------------------------------
struct TStoreElement;
class TInverseReferencer {
public:
    TInverseReferencer( const TIniSatParams&, const TNOAAImageParams&,
        const TCorrectionParams& corParams = TCorrectionParams() );
    ~TInverseReferencer();

//--------------------------------------------------------------------------
//  ll2xy
//  Функция решает задачу определения координат (x,y) пиксела снимка
//  AVHRR, соответствующего географической точке с координатами (lon,lat),
//  т.е. обратную задачу географической привязки.
//  Параметры:
//  lon, lat    Задают географические координаты точки.
//              -PI <= lon <= PI
//              -PI/2 <= lat <= PI/2
//  x, y        Указатели на переменные под результат.
//  Возвращаемое значение:
//  0               Точка с указанными координатами не принадлежит снимку.
//  1               Преобразование (lon,lat)->(x,y) проведено успешно.
//--------------------------------------------------------------------------
    int ll2xy( double lon, double lat, double *x, double *y );
    int ll2xy( double lon, double lat, int *x, int *y );

private:
    void ini_ll2xy( const TIniSatParams&, const TNOAAImageParams&, const TCorrectionParams& );

    ulong fTotalScans;
    double fOven0;
    double ER, VR;
    double gc_lat, sin_lat, cos_lat, prev_lat;
    TStoreElement *se;

    double maxScanAngle;    // максимальный угол сканирования, выраженный в радианах (центр крайнего пиксела)
};


//-------------------------------------------------------------------------
//  TStraightReferencer
//-------------------------------------------------------------------------
class TStraightReferencer{
public:
    TStraightReferencer( const TIniSatParams &, const TNOAAImageParams &,
        const TCorrectionParams& corParams = TCorrectionParams() );
    ~TStraightReferencer();

//-------------------------------------------------------------------------
//  Функция решает задачу определения координат (lon,lat) географической
//  точки, соответствующей пикселу снимка AVHRR с координатами (x,y), т.е.
//  прямую задачу географической привязки.
//  Параметры:
//  x               Столбец точки снимка.
//  y               Строка точки снимка.
//  lat, lon        Через эти параметры будет возвращены географические
//                  координаты, соответствующие точке снимка.
//                  -PI < lon <= PI
//                  -PI/2 <= lat <= PI/2
//  Целочисленная версия функции решает прямую задачу географической привязки
//  для центра пиксела с указанными координатами.
//-------------------------------------------------------------------------
    void xy2ll( double x, double y, double *lon, double *lat );
    void xy2ll( int x, int y, double *lon, double *lat );

private:
    void ini_xy2ll_seq( double );
    void xy2ll_seq( double, double *, double * );

    ulong fTotalScans;
    double fLastScan;
    double sin_ov, cos_ov;
    double myp[3][3];
    double mr[3][3];
    double ma[3][2]; // Матрица преобразования координат, заданных в с.к. сканера, в координаты в неподвижной геоцентрической с.к. Третий столбец не используется.
    double C;
    double b[3];
    TOrbitalModel *om;

    double maxScanAngle;    // максимальный угол сканирования, выраженный в радианах (центр крайнего пиксела)
};


#endif
