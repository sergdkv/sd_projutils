/*-------------------------------------------------------------------------
    c_b0gms.hpp
-------------------------------------------------------------------------*/
#ifndef _C_B0GMS_HPP_
#define _C_B0GMS_HPP_


#pragma pack(1)


struct TBlk0_VISSR {
    TBlk0_Common b0;

/*---------------------------------------------------------------------
	Переменная часть формата
---------------------------------------------------------------------*/
	uint16 frame_c;		/* количество кадров без сбоя
					синхронизации, в том числе
					кадров, которые полностью
					удалось	восстановить		64 */
	uint16 frame_lost;	/* количество потерянных
					кадров,	в том числе кадров со
					сбоем синхронизации, которые
					не удалось восстановить		66 */
	uint16 frame_restore;	/* количество кадров, которые
					полностью удалось восстановить	68 */
	uint16 frame_damaged;	/* количество кадров со сбоем,
					в которых потеряна часть
					секторов			70 */
	uint16 frame_gaps;	/* количество пропусков (gaps)	72 */
/* Примечания:
	1. Сумма frame_c ( 64 ) + frame_lost ( 66 ) + frame_damaged ( 70 )
		дает общее количество кадров в файле gms данного формата;
	2. Сумма frame_lost ( 66 ) + frame_damaged ( 70 ) равна общему
		количеству сбойных кадров;
	3. Поле frame_gaps ( 72 ) дает количество дыр, по которым распределено
		общее количество сбойных кадров frame_lost ( 66 ) +
		frame_damaged ( 70 );
	4. Пока не понятно как интерпретировать эти величины в формате 1b,
		как качество данных ( DACS Quality );
*/
	unsigned long frame_mask;	/* маска сегментов кадра GMS	74 */

        uint16 first_frame_number;  /* номер первого кадра VISSR в файле  76 */


	unsigned char unused1[50];	/* ==== резерв ====		78 */

/*---------------------------------------------------------------------
	Блок орбитальных данных NORAD
---------------------------------------------------------------------*/
	uint32 ref_num;	/* номер витка				128 */
	uint16 set_num;	/* номер набора элементов		132 */
	uint16 ephem;	/* тип эфемерид				134 */
	uint16 ep_year;	/* год ( полный )			136 */
	double ep_day;		/* день года ( 1-based )		138 */
	double n0;		/* среднее движение ( рад/мин )		146 */
	double bstar;		/* BSTAR Drag term			154 */
	double i0;		/* наклонение орбиты ( рад )		162 */
	double raan;		/* прямое восхождение восходящего узла ( рад ) 170 */
	double e0;		/* эксцентриситет орбиты		178 */
	double w0;		/* аргумент перигея ( рад )		186 */
	double m0;		/* средняя аномалия ( рад )		194 */
	unsigned char unused2[300];	/* ==== резерв ====		202 */
};




/*
    Формат 0-блока файла распакованных данных канала S-VISSR.
*/
struct TBlk0_VISSRChannel {
    TBlk0_Common b0;

    uint16  channel;    /* 1 - IR1, 2 - IR2, 3 - IR3, 4 - VIS */
    uint16  meaning;    /* физический смысл данных:
                            0 - отсчёты сканера (необработанные данные)
                            1 - температура
                            2 - альбедо */
    uint32   process;  /* биты: 0 - проведена атм. коррекция */

    uint32   pixNum;
    uint32   scanNum;
    uchar   bytesPix;

// минимальное и максимальное значения пикселов в изображении; эти поля не используются, если meaining == 0
    int16   minValue;
    int16   maxValue;

// value = double(pixel)*ka + kb
    double  ka;
    double  kb;

//-------------------------------------------------------------
//-------------------------------------------------------------
    uint32   firstVISSRFrame;
    uint32   lastVISSRFrame;
    uint32   firstPix;
    uint32   lastPix;

    uchar   spare[512-64-53];
};


/*
    Формат 0-блока файла проекции, построенной по данным S-VISSR.
*/
struct TBlk0_VISSRProj {
    TBlk0_Common b0;

    uint16  channel;  /* 1 - IR1, 2 - IR2, 3 - IR3, 4 - VIS */
    uint16  meaning;
    uint32   process;  /* биты: */

    uint32   pixNum;
    uint32   scanNum;
    uchar   bytesPix;

    int16   minValue;
    int16   maxValue;

    /* коэффициенты перехода к физическим величинам значений пикселов */
    double  ka;
    double  kb;

//-------------------------------------------------------------------------------
// Предыдущие поля совпадают со структурой TBlk0_VISSRChannel и занимают 35 байт.
//-------------------------------------------------------------------------------

    /* параметры проекции */
    uchar   projType; /* 1 - меркаторская, 2 - равнопромежуточная */
    float   lat; // гр
    float   lon; // гр
    float   latSize; // гр
    float   lonSize; // гр
    float   latRes; // сек
    float   lonRes; // сек

    uchar spare[512-64-62];
};


/*
    Структура заголовка DCS-файла.
*/
struct TBlk0_VISSRDCS {
    TBlk0_Common b0;

// смещения структур относительно начала файла
// если смещение равно 0, соответствующая структура или массив в файле отсутствует
    uint32 o_orbit_attitude;     // TGMSOrbitAttitude
    uint32 o_orbit;              // массив TGMSOrbit[8]
    uint32 o_attitude;           // массив TGMSAttitude[10]

    uint32 o_clb_vis;            // таблицы калибровки vis1, vis2, vis3, vis4 - четыре массива double [64] непосредственно друг за другом
    uint32 o_clb_ir;             // таблицы калибровки ir1, ir2, ir3 - три массива double [256] непосредственно друг за другом

    uchar spare[512-64-20];
};


#pragma pack()


#endif
